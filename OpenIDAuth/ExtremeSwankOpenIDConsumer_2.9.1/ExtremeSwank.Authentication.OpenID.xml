<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExtremeSwank.Authentication.OpenID</name>
    </assembly>
    <members>
        <member name="T:ExtremeSwank.Authentication.OpenID.IXRDSConsumer">
            <summary>
            Interface used for Extension plugins that utilize XRDS data directly.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.IXRDSConsumer.ProcessXRDS(System.Xml.XmlDocument)">
            <summary>
            Process the XRDS data provided by the XRDS Discovery plugin.
            </summary>
            <param name="xrdsdoc">XmlDocument object containing XRDS document.</param>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IXRDSConsumer.Parent">
            <summary>
            Parent consumer object.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.IDiscovery">
            <summary>
            Interface used for Discovery plugins.
            Discovery plugins extend the OpenID consumer to support additional identifier discovery methods.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.IDiscovery.Discover(System.String)">
            <summary>
            Method called during discovery process.
            </summary>
            <param name="content">HTTP response output from request.</param>
            <returns>String array containing two string arrays, first contains list of server URLs,
            second contains list of delegates (local identifiers).</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.IDiscovery.ProcessID(System.String)">
            <summary>
            Method called prior to discovery process.  Accepts a claimed identifier and returns
            the normalized identifier, and an end-point URL.
            </summary>
            <param name="openid">String containing claimed identifier.</param>
            <returns>Returns a string array with two fields, first field contains a normalized version
            of the claimed identifier, and an end-point URL.  Returns null if this plugin does not support
            the identifier type.</returns>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IDiscovery.Name">
            <summary>
            Human-readable name of plugin.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IDiscovery.Parent">
            <summary>
            Parent OpenIDConsumer object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IDiscovery.Version">
            <summary>
            Based on discovery, returns highest protocol version supported by endpoint. Used by consumer
            to determine which version of protocol to use when connecting to Identity Provider.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.ProtocolVersion">
            <summary>
            Represents a version of the OpenID protocol specification.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.ProtocolVersion.V1_1">
            <summary>
            Represents OpenID specification version 1.1.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.ProtocolVersion.V2_0">
            <summary>
            Represents OpenID specification version 2.0.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.XRDS">
            <summary>
            XRDS Discovery Plugin.  Provides everything needed to
            discover OpenIDs using XRDS documents.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.XRDS.ProcessID(System.String)">
            <summary>
            Accepts a claimed identifier and returns
            the normalized identifier, and an end-point URL.
            </summary>
            <param name="openid">String containing claimed identifier.</param>
            <returns>Returns a string array with two fields, first field contains a normalized version
            of the claimed identifier, and an end-point URL.  Returns null if this plugin does not support
            the identifier type.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.XRDS.Discover(System.String)">
            <summary>
            Consumes the contents of the XRDS document. Locates all OpenID-related data.
            </summary>
            <param name="content">HTTP response output from request.</param>
            <returns>String array containing to two string arrays, first contains list of server URLs,
            second contains list of delegates (local identifiers).</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.XRDS.#ctor(ExtremeSwank.Authentication.OpenID.ConsumerBase)">
            <summary>
            Creates is XRDS object, automatically attaches
            to specified OpenID object.
            </summary>
            <param name="oid">Parent OpenID object</param>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.XRDS.Name">
            <summary>
            Name of plugin.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.XRDS.Parent">
            <summary>
            Parent OpenID object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.XRDS.Version">
            <summary>
            Returns the newest OpenID protocol version supported
            by the Identity Provider.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.IExtension">
            <summary>
            Interface used for Extension plugins. 
            Extension plugins extend the OpenID consumer to support additional data-passing specifications.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.IExtension.Validation">
            <summary>
            Checked by OpenIDConsumer object during Validation.
            </summary>
            <remarks>If the extension should not perform validation, always return true.</remarks>
            <returns>Boolean - returns true if validation is successful, false if not.</returns>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IExtension.Name">
            <summary>
            Human-readable name of plugin.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IExtension.Parent">
            <summary>
            Parent OpenIDConsumer object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IExtension.Namespace">
            <summary>
            Advertised namespace this plugins supports.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IExtension.AuthorizationData">
            <summary>
            Data to be passed to Identity Provider during initial
            authenticaton request.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.IExtension.ObjectUserData">
            <summary>
            Key-value formatted information returned from successful authentication request.
            Information is specific to this Extension's namespace.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Utility">
            <summary>
            Common functions used by main classes and plugins.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.ToBase64String(System.Byte[])">
            <summary>
            Converts byte-array to Base64 string.
            </summary>
            <param name="inputBytes">Byte array to convert.</param>
            <returns>A Base64 string representing the input byte-array.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.EnsurePositive(System.Byte[])">
            <summary>
            Ensures that the byte array converts to a positive value. 
            </summary>
            <param name="inputBytes">Unsigned byte-array.</param>
            <returns>A corrected byte-array.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.UnsignedToBase64(System.Byte[])">
            <summary>
            Positively-ensures an input byte-array and converts to a Base64 string.
            </summary>
            <param name="inputBytes">Unsigned byte-array.</param>
            <returns>A Base64 string representing the byte-array.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.SplitResponse(System.String)">
            <summary>
            Converts HTTP response to key-value pairs.
            </summary>
            <param name="response">HTTP response.</param>
            <returns>Dictionary&lt;string, string&gt; object representing information in response.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.Keyval2URL(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts a Dictionary&lt;string, string&gt; to a URL string.
            </summary>
            <param name="arr">Dictionary&lt;string, string&gt; to convert.</param>
            <returns>A URL string.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.MakeRequest(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs an HTTP request and returns the response.
            </summary>
            <param name="url">URL to make request to.</param>
            <param name="method">Request type, either "GET" or "POST".</param>
            <param name="pms">Dictionary&lt;string, string&gt; containing key-value pairs to send.</param>
            <returns>String containing HTTP response.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.MakeRequest(System.String)">
            <summary>
            Performs an HTTP request and returns the response.
            </summary>
            <param name="url">URL to make request to.</param>
            <returns>String containing HTTP response.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.MakeRequest(System.String,System.String)">
            <summary>
            Performs an HTTP request and returns the response.
            </summary>
            <param name="url">URL to make request to.</param>
            <param name="method">Request type, either "GET" or "POST".</param>
            <returns>String containing HTTP response.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.RemoveHtmlComments(System.String)">
            <summary>
            Remove HTML comments from string.
            </summary>
            <param name="content">String containing HTML.</param>
            <returns>String with HTML comments removed.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Utility.HandleHttpError(System.Net.HttpWebResponse)">
            <summary>
            Processes errors received during HTTP requests.
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields">
            <summary>
            UserObject data fields that are made available with the SimpleRegistration extension.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.Nickname">
            <summary>
            Any UTF-8 string that the End User wants to use as a nickname.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.Email">
            <summary>
            The email address of the End User as specified in section 3.4.1 of [RFC2822] (Resnick, P., “Internet Message Format,” .).
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.FullName">
            <summary>
            UTF-8 string free text representation of the End User's full name.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.DateOfBirth">
            <summary>
            The End User's date of birth as YYYY-MM-DD. Any values whose representation uses fewer than the specified number of digits should be zero-padded. The length of this value MUST always be 10. If the End User user does not want to reveal any particular component of this value, it MUST be set to zero.
            For instance, if a End User wants to specify that his date of birth is in 1980, but not the month or day, the value returned SHALL be "1980-00-00".
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.Gender">
            <summary>
            The End User's gender, "M" for male, "F" for female.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.PostalCode">
            <summary>
            UTF-8 string free text that SHOULD conform to the End User's country's postal system.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.Country">
            <summary>
            The End User's country of residence as specified by ISO3166.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.Language">
            <summary>
            End User's preferred language as specified by ISO639.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistrationFields.Timezone">
            <summary>
            ASCII string from TimeZone database
            For example, "Europe/Paris" or "America/Los_Angeles".
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.OpenIDConsumer">
            <summary>
            Provides an OpenID Relying Party (Consumer) compatible with OpenID 1.1 and 2.0 specifications.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.ConsumerBase">
            <summary>
            A common base class for both Full Trust and Partial Trust versions
            of the OpenID Consumer
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.ConsumerBase.openid_url_identity">
            <summary>
            The OpenID, in URL form
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.ConsumerBase.openid_identity">
            <summary>
            The OpenID, in normalized form
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.ConsumerBase.URLs">
            <summary>
            A dictionary containing all accessible URLs
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.ConsumerBase.SessionPersister">
            <summary>
            The session persistence object
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.ConsumerBase.GlobalPersister">
            <summary>
            The global persistence object
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.Normalize(System.String)">
            <summary>
            Converts a supplied OpenID into two distinct entities - a normalized name and a URI
            </summary>
            <param name="openid">OpenID to normalize</param>
            <returns>A string array with two fields - the normalized name (extremeswank.com), 
            and the URI (http://extremeswank.com).</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.GetError">
            <summary>
            Returns a string describing the current error state
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.IsError">
            <summary>
            Gets a boolean value stating whether or not an error condition exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.RemoveSpaces(System.String)">
            <summary>
            Remove spaces between words and comma delimiters
            </summary>
            <param name="s">String to process</param>
            <returns>The corrected string</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.RetrieveUser">
            <summary>
            After successful validation, provides an object to hold the user information
            </summary>
            <returns>OpenIDUser object containing identifier and Extension data</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.GetOpenIDServer">
            <summary>
            Retrieve the URL of the OpenID Server using configured discovery plugins
            </summary>
            <returns>The URL of the OpenID Server</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.IsValidID">
            <summary>
            Independently performs discovery on the supplied OpenID and determines whether
            or not it is valid.
            </summary>
            <returns>True if discovery was successful, false if not.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.Redirect(System.String)">
            <summary>
            Redirects the user to a URL.
            </summary>
            <param name="url">URL to redirect</param>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.ValidateWithServer(System.Boolean)">
            <summary>
            Validate the assertion by contacting the OpenID Server
            </summary>
            <param name="fallback">Set to true if a previous stateful request has failed</param>
            <returns>True if validation is successful, false if not</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.BeginAuth">
            <summary>
            Begin authentication request
            </summary>
            <remarks>
            Needs to be implemented by the class that inherits
            this class.  Should first check to ensure all required
            arguments are set, perform discovery, then redirect the
            User Agent as required.
            </remarks>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.Validate">
            <summary>
            Validate authentication response
            </summary>
            <returns>True if validation was successful, false if not.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ConsumerBase.Init">
            <summary>
            Shared initialization method - should be used by constructor.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.OpenIDServer">
            <summary>
            Gets or sets the URL of Identity Provider
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.TrustRoot">
            <summary>
            Gets or sets the URL that will serve as the base root of trust - defaults to current domain
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.ReturnURL">
            <summary>
            Gets or sets a URL to transfer user upon approval - defaults to current page
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.Identity">
            <summary>
            Gets or sets the OpenID idenitifer and normalizes the value
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.PluginsExtension">
            <summary>
            List containing IExtension objects to use when performing authentication requests.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.PluginsDiscovery">
            <summary>
            List containing IDiscovery objects to use when performing name discovery.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.AllowLogin">
            <summary>
            Persists the cnonce value in the current session so it can
            be verified when the authentication response is received.
            </summary>
            <remarks>
            This is extremely important to ensure that simply replaying
            the authentication response does not result in successful
            authentication.  AllowLogin is not populated until an authentication
            request has been triggered, and it is cleared as soon as the 
            matching request is received and verified.
            </remarks>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.WebRoot">
            <summary>
            Return a URL representing the current host
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.AuthVersion">
            <summary>
            Version of protocol currently being used.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.RequestedMode">
            <summary>
            Checks the current page request and returns the requested
            mode.
            </summary>
            <returns>RequestedMode representing the current mode.</returns>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ConsumerBase.RedirectURLStateless">
            <summary>
            Get the redirect URL needed for Stateless authentication
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDConsumer.#ctor">
            <summary>
            Provides a new OpenIDConsumer object with default settings.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDConsumer.BeginAuth">
            <summary>
            Begins performing a standard OpenID authentiction request.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDConsumer.AuthImmediate">
            <summary>
            Begins authentication process, but returns an Immediate-mode authentication URL for external use.
            </summary>
            <remarks>
            <para>
            Immediate mode allows the Consumer to verify that the User Agent is already
            logged in the OpenID Provider.  By using a hidden iframe and some AJAX or Javascript,
            the data can be passed behind the scenes without the appearance of ever leaving the
            Consumer's website.
            </para>
            <para>
            First, call AuthImmediate(), which will perform discovery and return a fully
            populated URL that should be opened by the User Agent.  For web browsers, set
            the target of the iframe to the supplied URL.
            </para>
            <para>
            The iframe will be redirected to the OpenID Provider.  The OpenID Provider will
            immediately redirect the iframe back to the Consumer.  Once that has occurred, be sure to
            use the ValidateImmediate() method to verify whether or not the user is currently
            logged in at the provider.
            </para>
            </remarks>
            <returns>String containing the immediate-mode URL. Null if method cannot be used with current settings.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDConsumer.Validate">
            <summary>
            Validates regular (non-immediate) OpenID authentication responses.
            </summary>
            <remarks>
            <para>
            To determine if this method should be used, look at the value
            of the RequestedMode property, which detects the operational mode
            requested by the current HTTP request.  
            </para>
            <para>
            If RequestedMode is set to RequestedMode.IdResolution, the request
            is an authentication response from an OpenID Provider.
            </para>
            <para>
            Therefore, either Validate() or ValidateImmediate() should be used to verify
            the validity of the response.
            </para>
            </remarks>
            <returns>True if successfully authenticated, false if not.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDConsumer.ValidateImmediate">
            <summary>
            Validate an immediate-mode response.
            </summary>
            <remarks>
            <para>
            To determine if this method should be used, look at the value
            of the RequestedMode property, which detects the operational mode
            requested by the current HTTP request.  
            </para>
            <para>
            If RequestedMode is set to RequestedMode.IdResolution, the request
            is an authentication response from an OpenID Provider.
            </para>
            <para>
            Therefore, either Validate() or ValidateImmediate() should be used to verify
            the validity of the response.
            </para>
            </remarks>
            <returns>Returns either "true", "false", or a URL.  If "true", validation was successful.
            If "false", this method cannot be used with current settings.  If a URL, then the 
            validation has failed, and the User Agent should be redirected to the returned URL.</returns>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.OpenIDConsumer.AuthMode">
            <summary>
            Authorization mode - either Stateful or Stateless
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.OpenIDConsumer.Encryption">
            <summary>
            For Stateful mode, choose whether or not the shared secret will be encrypted
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DiffieHellman">
            <summary>
            Defines a base class from which all Diffie-Hellman implementations inherit.
            </summary>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:Mono.Security.Cryptography.DiffieHellman"/> algorithm.
            </summary>
            <returns>A new instance of the default implementation of DiffieHellman.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of <see cref="T:Mono.Security.Cryptography.DiffieHellman"/>.
            </summary>
            <param name="algName">The name of the implementation of DiffieHellman to use.</param>
            <returns>A new instance of the specified implementation of DiffieHellman.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.CreateKeyExchange">
            <summary>
            When overridden in a derived class, creates the key exchange data. 
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.DecryptKeyExchange(System.Byte[])">
            <summary>
            When overridden in a derived class, extracts secret information from the key exchange data.
            </summary>
            <param name="keyex">The key exchange data within which the secret information is hidden.</param>
            <returns>The secret information derived from the key exchange data.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.ExportParameters(System.Boolean)">
            <summary>
            When overridden in a derived class, exports the <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivate"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for Diffie-Hellman.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.ImportParameters(Mono.Security.Cryptography.DHParameters)">
            <summary>
            When overridden in a derived class, imports the specified <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for Diffie-Hellman.</param>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.FromXmlString(System.String)">
            <summary>
            Reconstructs a <see cref="T:Mono.Security.Cryptography.DiffieHellman"/> object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DiffieHellman object.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">One of the values in the XML string is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellman.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current <see cref="T:Mono.Security.Cryptography.DiffieHellman"/> object.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>An XML string encoding of the current DiffieHellman object.</returns>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy">
            <summary>
            Provides support for the OpenID Authentication Policy Extension.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.#ctor(ExtremeSwank.Authentication.OpenID.ConsumerBase)">
            <summary>
            Creates an instance of AuthenticationPolicy extension.
            </summary>
            <param name="openid">The parent OpenIDConsumer object.</param>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.Validation">
            <summary>
            Whether or not the validation completed per this extension.
            </summary>
            <returns>Always returns true.</returns>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.MaxAge">
            <summary>
            The longest period of time that can pass since the user was
            last authenticated by the Identity Provider.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.PreferredPolicies">
            <summary>
            A List of preferred policy URIs that are requested for this authentication
            request.  Use the AuthenticationURI static methods.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.Name">
            <summary>
            The human-readable name of this extension.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.Parent">
            <summary>
            The OpenIDConsumer object that is parent to this extension.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.Namespace">
            <summary>
            The namespace URI of this extension.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.AuthorizationData">
            <summary>
            Name-Value data to be sent to Identity Provider during
            initial authentication request.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationPolicy.ObjectUserData">
            <summary>
            Returns data for use by OpenIDUser object.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.Yadis">
            <summary>
            Yadis Discovery Plugin.
            Provides everything needed to perform Yadis discovery.
            Depends on XRDS plugin to decode resulting XRDS document.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.Yadis.ProcessID(System.String)">
            <summary>
            Not used.  Always returns null.
            </summary>
            <param name="openid">Claimed identifier.</param>
            <returns>Null</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.Yadis.Discover(System.String)">
            <summary>
            Perform Yadis discovery on a HTTP response.
            Checks both HTTP headers and response body.
            </summary>
            <param name="content">HTTP response</param>
            <returns>String array containing two string arrays, first list is the discovered Identity Providers,
            second list is the discovered local IDs (delegates).</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.Yadis.#ctor(ExtremeSwank.Authentication.OpenID.ConsumerBase)">
            <summary>
            Creates a new Yadis object, automatically attaches to supplied
            OpenID object.
            </summary>
            <param name="oid"></param>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.Yadis.Name">
            <summary>
            Human-readable name of plugin.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.Yadis.Parent">
            <summary>
            Parent OpenID object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.Yadis.Version">
            <summary>
            Highest version of OpenID protocol supported by the discovered Identity Provider.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.HTML">
            <summary>
            HTML Discovery Plugin.  Provides everything needed to
            discover OpenIDs using HTML documents.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.HTML.ProcessID(System.String)">
            <summary>
            Processes a claimed identifier and returns a normalized ID and an endpoint URL.
            </summary>
            <param name="openid">Claimed identifier.</param>
            <returns>String-array containing a normalized ID and an endpoint URL.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.HTML.Discover(System.String)">
            <summary>
            Parse HTTP response for OpenID Identity Providers.
            </summary>
            <param name="content">HTTP response content</param>
            <returns>String array containing two string arrays, first lists server endpoints, the second
            lists local identifiers (delegates).</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.HTML.#ctor(ExtremeSwank.Authentication.OpenID.ConsumerBase)">
            <summary>
            Creates a new HTML object and automatically attaches it to
            the supplied OpenID object.
            </summary>
            <param name="oid"></param>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.HTML.Name">
            <summary>
            Human-readable plugin name.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.HTML.Parent">
            <summary>
            Parent OpenID object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Discovery.HTML.Version">
            <summary>
            Highest version of OpenID protocol supported by discovered Identity Provider.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Errors">
            <summary>
            Static text for frequently occurring errors.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.NoServersFound">
            <summary>
            No servers were found during the discovery process.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.BadSignature">
            <summary>
            The signature received back from the IdP didn't decode to the
            expected value.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.HttpError">
            <summary>
            An HTTP error occurred when attempting to contact the IdP.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.ReceivedPlaintext">
            <summary>
            Tried to create an association with DH-SHA1 or DH-SHA256 and received a secret
            in plaintext instead.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.AuthModeNotSet">
            <summary>
            The AuthorizationMode property has not been set.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.SessionTimeout">
            <summary>
            The window to complete the authentication request has expired.
            User should try the request again.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.RequestRefused">
            <summary>
            Request has been actively refused by the IdP.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.HandleInvalidated">
            <summary>
            The cached association handle has been invalidated.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.HandlesDoNotMatch">
            <summary>
            The cached and received association handles do not match.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.AssociationNotFound">
            <summary>
            Tried to look up the assocation record and failed.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.AssociationExpired">
            <summary>
            The cached association record has expired.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.NoIdSpecified">
            <summary>
            No ID was specified.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.NoStatelessImmediate">
            <summary>
            Attempted to perform an Immediate request while in Stateless mode.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.Errors.XmlDecodeFailed">
            <summary>
            Failed to decode an XML document.
            </summary>
        </member>
        <member name="M:Mono.Math.Prime.PrimalityTests.RabinMillerTest(Mono.Math.BigInteger,Mono.Math.Prime.ConfidenceFactor)">
            <summary>
                Probabilistic prime test based on Rabin-Miller's test
            </summary>
            <param name="n" type="BigInteger.BigInteger">
                <para>
                    The number to test.
                </para>
            </param>
            <param name="confidence" type="int">
                <para>
            The number of chosen bases. The test has at least a
            1/4^confidence chance of falsely returning True.
                </para>
            </param>
            <returns>
            <para>
            	True if "this" is a strong pseudoprime to randomly chosen bases.
            </para>
            <para>
            	False if "this" is definitely NOT prime.
            </para>
            </returns>
        </member>
        <member name="T:Mono.Math.Prime.Generator.NextPrimeFinder">
            <summary>
            Finds the next prime after a given number.
            </summary>
        </member>
        <member name="M:Mono.Math.Prime.Generator.PrimeGeneratorBase.PostTrialDivisionTests(Mono.Math.BigInteger)">
            <summary>
            Performs primality tests on bi, assumes trial division has been done.
            </summary>
            <param name="bi">A BigInteger that has been subjected to and passed trial division</param>
            <returns>False if bi is composite, true if it may be prime.</returns>
            <remarks>The speed of this method is dependent on Confidence</remarks>
        </member>
        <member name="M:Mono.Math.Prime.Generator.PrimeGeneratorBase.GenerateNewPrime(System.Int32)">
            <summary>
            Abstract method.  Generates a new prime number given a provided number of bits.
            </summary>
            <param name="bits">Integer representing the number of bits.</param>
            <returns>A BigInteger object representing the prime number.</returns>
        </member>
        <member name="F:Mono.Math.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:Mono.Math.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="M:Mono.Math.BigInteger.GenerateRandom(System.Int32,System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Generates a new, random BigInteger of the specified length.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <param name="rng">A random number generator to use to obtain the bits.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.GenerateRandom(System.Int32)">
            <summary>
            Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Randomize(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Randomizes the bits in "this" from the specified RNG.
            </summary>
            <param name="rng">A RNG.</param>
        </member>
        <member name="M:Mono.Math.BigInteger.Randomize">
            <summary>
            Randomizes the bits in "this" from the default RNG.
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.NextHighestPrime(Mono.Math.BigInteger)">
            <summary>
            Generates the smallest prime >= bi
            </summary>
            <param name="bi">A BigInteger</param>
            <returns>The smallest prime >= bi. More mathematically, if bi is prime: bi, else Prime [PrimePi [bi] + 1].</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Incr2">
            <summary>
            Increments this by two
            </summary>
        </member>
        <member name="T:Mono.Math.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.AddSameSign(Mono.Math.BigInteger,Mono.Math.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.Compare(Mono.Math.BigInteger,Mono.Math.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.SingleByteDivideInPlace(Mono.Math.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:Mono.Math.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration">
            <summary>
            Provides support for the Simple Registration extension.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.Validation">
            <summary>
            Performs extension-specific validation functions once authentication response has been received.
            </summary>
            <returns>Returns boolean value, true if validation is successful, false if not.</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.AddOptionalFields(System.String[])">
            <summary>
            Add optional fields using members of the Fields class.
            </summary>
            <example>
            <code>
            OpenIDConsumer openid;
            SimpleRegistration sr = new SimpleRegistration(openid);
            sr.AddOptionalFields(Fields.Nickname, Fields.Email, Fields.PostalCode);
            </code>
            </example>
            <param name="fields">A list of parameters from the Fields class.</param>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.AddRequiredFields(System.String[])">
            <summary>
            Add required fields using members of the Fields class.
            </summary>
            <example>
            <code>
            OpenIDConsumer openid;
            SimpleRegistration sr = new SimpleRegistration(openid);
            sr.AddRequiredFields(Fields.Nickname, Fields.Email, Fields.PostalCode);
            </code>
            </example>
            <param name="fields">A list of parameters from the Fields class.</param>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.#ctor(ExtremeSwank.Authentication.OpenID.ConsumerBase)">
            <summary>
            Creates a new SimpleRegistration plugin and attaches it to a OpenID object.
            </summary>
            <param name="oid">OpenID object to attach.</param>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.Name">
            <summary>
            Gets the name of the extension.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.Namespace">
            <summary>
            Gets the extension's registered namespace.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.Parent">
            <summary>
            Gets or sets the parent OpenID object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.OptionalFields">
            <summary>
            Comma-delimited list of optional fields to retrieve from Identity Provider.
            Valid values are: nickname, email, fullname, dob, gender, postcode,
            country, language, timezone
            </summary>
            <example>
            <code>
            OpenIDConsumer openid;
            SimpleRegistration sr = new SimpleRegistration(openid);
            sr.OptionalFields = "nickname,fullname,postcode";
            </code>
            </example>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.RequiredFields">
            <summary>
            Comma-delimited list of required fields to retrieve from Identity Provider.
            Valid values are: nickname, email, fullname, dob, gender, postcode,
            country, language, timezone
            </summary>
            <example>
            <code>
            OpenIDConsumer openid;
            SimpleRegistration sr = new SimpleRegistration(openid);
            sr.RequiredFields = "nickname,fullname,postcode";
            </code>
            </example>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.PolicyURL">
            <summary>
            Privacy policy URL to send to Identity Provider.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.AuthorizationData">
            <summary>
            Dictionary&lt;string, string&gt; containing key-value pairs that will be passed
            during initial authentication request to Identity Provider.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.SimpleRegistration.ObjectUserData">
            <summary>
            Dictionary&lt;string, string&gt; containing data received from authentication response.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.ErrorStore">
            <summary>
            Posts an error.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.ErrorStore.Store(System.String)">
            <summary>
            Stores a single error, and holds into a memory cache for later retrieval.
            </summary>
            <param name="desc">Description of error. Typically pulled from the Errors class.</param>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.ErrorStore.Error">
            <summary>
            String array containing last stored error.  First field is the description, second is the code.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.RequestedMode">
            <summary>
            OpenID modes that can be remotely requested.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.RequestedMode.None">
            <summary>
            No OpenID mode was requested.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.RequestedMode.IdResolution">
            <summary>
            ID Resolution mode was requested.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.RequestedMode.CancelledByUser">
            <summary>
            Operation was cancelled by user.
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DHKeyGeneration">
            <summary>
            Defines the different Diffie-Hellman key generation methods.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHKeyGeneration.Random">
            <summary>
            Returns dynamically generated values for P and G. Unlike the Sophie Germain or DSA key generation methods,
            this method does not ensure that the selected prime offers an adequate security level.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHKeyGeneration.Static">
            <summary>
            Returns values for P and G that are hard coded in this library. Contrary to what your intuition may tell you,
            using these hard coded values is perfectly safe.
            The values of the P and G parameters are taken from 'The OAKLEY Key Determination Protocol' [RFC2412].
            This is the prefered key generation method, because it is very fast and very safe.
            Because this method uses fixed values for the P and G parameters, not all bit sizes are supported.
            The current implementation supports bit sizes of 768, 1024 and 1536.
            </summary>
        </member>
        <member name="T:Mono.Math.Prime.ConfidenceFactor">
            <summary>
            A factor of confidence.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.ExtraLow">
            <summary>
            Only suitable for development use, probability of failure may be greater than 1/2^20.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Low">
            <summary>
            Suitable only for transactions which do not require forward secrecy.  Probability of failure about 1/2^40
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Medium">
            <summary>
            Designed for production use. Probability of failure about 1/2^80.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.High">
            <summary>
            Suitable for sensitive data. Probability of failure about 1/2^160.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.ExtraHigh">
            <summary>
            Use only if you have lots of time! Probability of failure about 1/2^320.
            </summary>
        </member>
        <member name="F:Mono.Math.Prime.ConfidenceFactor.Provable">
            <summary>
            Only use methods which generate provable primes. Not yet implemented.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.AuthorizationMode">
            <summary>
            Represents the mode used for authentication.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.AuthorizationMode.Stateful">
            <summary>
            Represents Stateful (smart) authentication.
            </summary>
            <remarks>In Stateful authentication, OpenIDConsumer will first create a 
            cached shared secret with the Identity Provider. Then, the authentication
            request to the Identity Provider through the end-user's User Agent.
            Once the user has been authenticated at the Identity Provider, a response is
            sent once again through the User Agent. The Consumer will then verify the
            validity of the response using the cached pre-shared secret.
            Stateful mode requires less processing at the Identity Provider
            and gives faster response to the user.</remarks>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.AuthorizationMode.Stateless">
            <summary>
            Represents Stateless (dumb) authentication.
            </summary>
            <remarks>In Stateless authentication, the authentication request is
            sent immediately to the Identity Provider through the end-user's User Agent.
            The Identity Provider will authenticate the user and will eventually
            respond with the requested information, also passing the data through the 
            User Agent. The Consumer will then communicate with the Identity Provider 
            directly to confirm the validity of the data.</remarks>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationURI">
            <summary>
            Some static methods that return authentication policy URIs.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationURI.PhishingResistant">
            <summary>
            Returns the URI for Phishing-Resistant Authentication
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationURI.MultiFactor">
            <summary>
            Returns the URI for Multi-Factor Authentication
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Plugins.Extensions.AuthenticationURI.PhysicalMultiFactor">
            <summary>
            Returns the URI for Physical Multi-Factor Authentication
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.SessionPersister">
            <summary>
            Provides session-specific persistence, uses Session object.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.SessionPersister.Cleanup">
            <summary>
            Removes all objects from Session persistence that were
            inserted using the SessionPersister object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.SessionPersister.Item(System.String)">
            <summary>
            Indexer, gets or sets objects into session persistence by key.
            </summary>
            <param name="key">String representing key index</param>
            <returns>Object stored in session persistence. If null, then object is not present.</returns>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.SessionPersister.SavedKeys">
            <summary>
            Returns a string array of keys representing session
            persisted objects.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.GlobalPersister">
            <summary>
            Provides global application persistence, uses Application object.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.GlobalPersister.Cleanup">
            <summary>
            Cleans out any objects persisted Globally using the
            GlobalPersister object.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.GlobalPersister.Item(System.String)">
            <summary>
            Indexer, gets or sets objects into global persistence by key.
            </summary>
            <param name="key">String representing key index</param>
            <returns>Object stored in global persistence. If null, then object is not present.</returns>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.GlobalPersister.SavedKeys">
            <summary>
            Returns a string array of keys representing globally
            persisted objects.
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DiffieHellmanManaged">
            <summary>
            Implements the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <remarks>The default length of the shared secret is 1024 bits.</remarks>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Int32,System.Int32,Mono.Security.Cryptography.DHKeyGeneration)">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="bitLength">The length, in bits, of the public P parameter.</param>
            <param name="l">The length, in bits, of the secret value X. This parameter can be set to 0 to use the default size.</param>
            <param name="method">One of the <see cref="T:Mono.Security.Cryptography.DHKeyGeneration"/> values.</param>
            <remarks>The larger the bit length, the more secure the algorithm is. The default is 1024 bits. The minimum bit length is 128 bits.<br/>The size of the private value will be one fourth of the bit length specified.</remarks>
            <exception cref="T:System.ArgumentException">The specified bit length is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="x">The X parameter of the Diffie-Hellman algorithm. This is a private parameter. If this parameters is a null reference (<b>Nothing</b> in Visual Basic), a secret value of the default size will be generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new <see cref="T:Mono.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm.</param>
            <param name="l">The length, in bits, of the private value. If 0 is specified, the default value will be used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="l"/> is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.CreateKeyExchange">
            <summary>
            Creates the key exchange data.
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.DecryptKeyExchange(System.Byte[])">
            <summary>
            Extracts secret information from the key exchange data.
            </summary>
            <param name="keyEx">The key exchange data within which the shared key is hidden.</param>
            <returns>The shared key derived from the key exchange data.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for <see cref="T:Mono.Security.Cryptography.DiffieHellman"/>.</returns>
        </member>
        <member name="M:Mono.Security.Cryptography.DiffieHellmanManaged.ImportParameters(Mono.Security.Cryptography.DHParameters)">
            <summary>
            Imports the specified <see cref="T:Mono.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for <see cref="T:Mono.Security.Cryptography.DiffieHellman"/>.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="P"/> or <paramref name="G"/> is a null reference (<b>Nothing</b> in Visual Basic) -or- <paramref name="P"/> is not a prime number.</exception>
        </member>
        <member name="P:Mono.Security.Cryptography.DiffieHellmanManaged.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="P:Mono.Security.Cryptography.DiffieHellmanManaged.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.OpenIDUser">
            <summary>
            Contains all information received about the authenticated user.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDUser.#ctor">
            <summary>
            Returns an empty OpenIDUser object.
            </summary>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDUser.GetValue(System.String)">
            <summary>
            Retrieves extension data.
            </summary>
            <param name="key">Key of value to get</param>
            <returns>String containing value</returns>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDUser.#ctor(System.String)">
            <summary>
            Returns a new OpenIDUser object with a pre-set claimed identity.
            </summary>
            <param name="identity">String containing the claimed identifier.</param>
        </member>
        <member name="M:ExtremeSwank.Authentication.OpenID.OpenIDUser.Retrieve(ExtremeSwank.Authentication.OpenID.ConsumerBase)">
            <summary>
            Fill the object with information from the current response.
            </summary>
            <param name="openid">OpenIDConsumer object from which to retrieve the data.</param>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.OpenIDUser.Identity">
            <summary>
            Gets or sets the claimed identifier.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.OpenIDUser.BaseIdentity">
            <summary>
            Gets or sets the identifier validated by the Identity Provider.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.OpenIDUser.ExtensionData">
            <summary>
            Data returned by all loaded Extensions.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExtremeSwank.Authentication.OpenID.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ExtremeSwank.Authentication.OpenID.KeyEncryption">
            <summary>
            Represents the encryption type used during key exchange.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.KeyEncryption.None">
            <summary>
            No encryption used during key exchange operation.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.KeyEncryption.DHSHA1">
            <summary>
            Diffie-Hellman key exchange will be used, and data will be
            signed using SHA1.
            </summary>
        </member>
        <member name="F:ExtremeSwank.Authentication.OpenID.KeyEncryption.DHSHA256">
            <summary>
            Diffie-Hellman key exchange will be used, and data will be
            signed using SHA256.
            </summary>
        </member>
        <member name="T:Mono.Security.Cryptography.DHParameters">
            <summary>
            Represents the parameters of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHParameters.P">
            <summary>
            Represents the public <b>P</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHParameters.G">
            <summary>
            Represents the public <b>G</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:Mono.Security.Cryptography.DHParameters.X">
            <summary>
            Represents the private <b>X</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
    </members>
</doc>
